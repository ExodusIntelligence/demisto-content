import demistomock as demisto  # noqa: F401
from CommonServerPython import *  # noqa: F401
from typing import Union

CONTEXT_PATH_TO_READ_PROCESS_FILE_NAME_FROM_XDR_DATA = "PaloAltoNetworksXDR.ScriptResult"


def read_xdr_context():
    script_results = demisto.get(demisto.context(), CONTEXT_PATH_TO_READ_PROCESS_FILE_NAME_FROM_XDR_DATA)
    return script_results


def entries_to_markdown(entry_list: List[str]):
    """
   Args:
        entry_list (List[str]): the _return_value array from demisto context

    Returns:
        str: a markdown table to be displayed on the layout.
    """
    process_list = []
    if not entry_list:
        return ""
    for entry in entry_list:
        start_cpu = entry.find('CPU')
        end_cpu = start_cpu + 5
        start_memory = entry.find('Memory')
        end_memory = start_memory + 8
        process_list.append({
            'Name': entry[6:start_cpu - 2],
            'CPU': entry[end_cpu:start_memory - 2],
            'Memory': entry[end_memory: len(entry)]
        })
    md = tableToMarkdown('', process_list, ['Name', 'CPU', 'Memory'])
    return md


def detect_process_field(entry: str):
    lst = ['Name', 'Memory', 'CPU']
    for word in lst:
        if word not in entry:
            return False
    return True


def find_last_process_list_script(script_results: Union[list, dict]):
    """
    Args:
        script_results (List | dict): script results after running XDRIR script

    Returns:
        list | None: if a proper result was find return the _return_value else None
    """
    if not script_results:
        return None
    if not isinstance(script_results, list):
        script_results = [script_results]
    for script_result in reversed(script_results):
        if not (results := script_result.get('results', [])):
            continue
        if not isinstance(results, list):
            results = [results]
        for result in reversed(results):
            if not (_return_value := result.get('_return_value', [])):
                continue
            if detect_process_field(_return_value[0]):
                return _return_value
    return None


def main():
    script_results = read_xdr_context()
    _return_value = find_last_process_list_script(script_results)
    markdown = entries_to_markdown(_return_value)
    if markdown:
        return_results(CommandResults(readable_output=markdown))
    else:
        return_results(CommandResults(readable_output="No data to present"))


if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
