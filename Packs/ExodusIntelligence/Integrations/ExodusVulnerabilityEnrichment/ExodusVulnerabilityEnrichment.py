import urllib3
import uuid
from eve_client import eve

# Disable insecure warnings
urllib3.disable_warnings()

''' CONSTANTS '''

DATE_FORMAT = '%Y-%m-%dT%H:%M:%SZ'
MAX_INCIDENTS_TO_FETCH = 50

EMAIL = demisto.getParam('email')
PASSWORD = demisto.getParam('password')
CLIENT_ENCRYPTION_KEY = demisto.getParam('client_encryption_key')
EVE_URL = demisto.getParam('url')
MAX_XI = demisto.getParam('max_xi_score')
MAX_XI = int(MAX_XI) if MAX_XI else 10
MIN_XI = demisto.getParam('min_xi_score')
MIN_XI = int(MIN_XI) if MIN_XI else 0

WANTED_FIELDS = [
    "identifier",
    "xi_scores",
    "cves",
    "product",
    "vendor",
    "mitigation",
    "attack_vector",
    "cvss",
    "description",
]

LIST_FIELDS = [
    "transport",
    "links",
    "application",
    "zdis",
    "cpe23Uri",
    "methods",
    "modules",
]


def get_best_xi_score(scores):
    """Get most recent xi_score.

    Args:
        xi_scores (dict): Dictionary with xi_scores.

    Returns:
        float: Most recent xi_score.
    """
    if scores == []:
        return 0.0
    commented_scores = [s for s in scores if s['comment'] != '']
    if len(commented_scores) > 0:
        scores = commented_scores
    return float(sorted(scores, key=lambda x: x['created_at'], reverse=True)[0]['score'])


def extract_data(data, dest):
    """Extract data from nested dictionary.

    Args:
        data (dict): Nested Dictionary to extract data.
        dest (dict): Dictionary to store the extracted data.

    Returns:
        dict: Dictionary with extracted data.
    """
    for key, value in data.items():
        demisto_field = key.replace("_", "").lower()
        t_value = type(value)
        if key == "xi_scores":
            dest[demisto_field] = get_best_xi_score(value)
        elif t_value is dict:
            extract_data(value, dest)
        elif t_value is list:
            for i in value:
                if type(i) is dict:
                    extract_data(i, dest)
                elif type(i) is str or type(i) is float:
                    if i in WANTED_FIELDS:
                        dest[demisto_field] = i
            if key in LIST_FIELDS:
                for i in value:
                    try:
                        dest[demisto_field].append(i)
                    except KeyError:
                        dest[demisto_field] = []
                        dest[demisto_field].append(i)
        else:
            if key in LIST_FIELDS:
                try:
                    dest[demisto_field].append(value)
                except KeyError:
                    dest[demisto_field] = []
                    dest[demisto_field].append(value)
            elif key in WANTED_FIELDS:
                dest[demisto_field] = value
    return dest


def connect():
    try:
        exodus = eve.EVEClient(EMAIL, PASSWORD, CLIENT_ENCRYPTION_KEY, url=EVE_URL)
    except Exception as e:
        demisto.debug(f'There was a problem connecting to the server: {e}')
        return None
    return exodus


def fetch_indicators():
    score = 0.0
    indicators = []
    formatted_list = []
    min_xi = 0 if MIN_XI == "" else MIN_XI
    max_xi = 10 if MAX_XI == "" else MAX_XI
    try:
        exodus = connect()
        demisto.debug("Connected to server")
        recent_vulns = exodus.get_recent_vulns()
        try:
            data = recent_vulns['data']['items']
        except KeyError as e:
            demisto.debug(f"There was an error getting the data {e}")
        demisto.debug(f"Fetched {len(data)} total vulnerabilities")
        for item in data:
            try:
                cve = item["cves"][0]
                report_data = {'cve': cve}
                if score >= min_xi and score <= max_xi:
                    report = exodus.get_report(cve)
                    vulnerability = exodus.get_vuln(cve)
                    if not report["ok"] is False:
                        report_data = extract_data(report, {'cve': cve})
                    vuln_data = extract_data(vulnerability, report_data)
                    formatted_list.append(vuln_data)
            except KeyError as e:
                demisto.debug(f'There was a problem: {e}')
    except Exception as e:
        return_error(f'Something failed: {e}')

    demisto.debug(f"{len(formatted_list)} vulnerabilities passed filters")

    if len(formatted_list):
        for items in formatted_list:
            try:
                indicator = {
                    'value': f"xi-{uuid.uuid4().hex}",
                    'type': 'Exodus Intelligence',
                    'fields': items,
                }
                indicators.append(indicator)
            except KeyError as e:
                demisto.debug(f'There was a problem creating indicators: {e}')
        demisto.createIndicators(indicators)


def reset_data_stream(days):
    try:
        exodus = connect()
        data = exodus.get_recent_vulns(days)
        return data['data']['end_ts']
    except (ConnectionError, KeyError) as e:
        demisto.debug(f"There was a problem connecting to the API {e}")


'''EXECUTION'''

if demisto.command() == 'fetch-indicators':
    fetch_indicators()
    sys.exit(0)
elif demisto.command() == 'reset-data-stream':
    days = demisto.getArg('reset')
    try:
        days = int(days)
    except ValueError as e:
        demisto.results(f'Days should be an Integer. Entered {days}')
        sys.exit(1)
    new_date = reset_data_stream(int(days))
    demisto.results(new_date)
    sys.exit(0)
elif demisto.command() == 'test-module':
    exodus = connect()
    if exodus is None:
        return_error('Failed to login.')
    else:
        demisto.results('ok')
